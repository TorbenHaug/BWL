<% @output = []; def puts(line); @output.push(line.to_s + "<br/>"); end; def print(line); @output.push(line.to_s); end %>
<h1>Test area of MrTorgue</h1><br/><br/><div class="post">

<!-- TEST CODE BEGINNING -->
<%
@bills = {}
@articles = {}
Article.all.each{|item| @articles[item.id] = ArticleData.new(item.id, item.name, nil)}
Bill.all.each{|item| @bills[item.id] = BillData.new(item.id, item.user_id)}
BillEntry.all.each{|item| @bills[item.bill_id].add_entry(BillEntryData.new(@bills[item.bill_id], @articles[item.article_id], item.amount))}

def TEST_get_bills(articles)
  article_bills = articles.map{|article|
    @bills.values.select{|bill|
      bill.entry_data.any?{|entry|
        entry.article_data == article
      }
    }
  }
  
  result = article_bills.reduce(:&)
  result = (result.nil?) ? ([]) : (result.to_a)
  
  return result
end

def TEST_get_support(articles)
  bc_all = @bills.size
  bc_articles = TEST_get_bills(articles).size
  
  support = (bc_all != 0) ? (100.0 * bc_articles / bc_all) : (0.0)
  
  return support
end

def TEST_get_article_sets(min_support)
  articles = @articles.values.reject{|article| TEST_get_support([article]) < min_support}
  
  # Generate sets with one article
  results = articles.map{|article| [article]}
  
  # Generate sets with at least two articles
  results.each{|result|
    articles.each{|article|
      if (!result.include?(article))
        new_result = (result | [article]).to_set
        
        if (!results.include?(new_result) && TEST_get_support(new_result) >= min_support)
          results.push(new_result)
        end
      end
    }
  }
  
  return results
end

def TEST_get_partitions(set)
  yield [] if set.empty?
  (0 ... 2 ** set.size / 2).each do |i|
    parts = [[], []]
    set.each do |item|
      parts[i & 1] << item
      i >>= 1
    end
    TEST_get_partitions(parts[1]) do |b|
      result = [parts[0]] + b
      result = result.reject do |e|
        e.empty?
      end
      yield result
    end
  end
end

def TEST_get_association_rules(min_support, min_confidence)
  article_sets = TEST_get_article_sets(min_support)
  bc_all = @bills.size
  
  result = []
  article_sets.each{|item|
    TEST_get_partitions(item.to_set){|partition|
      if (partition.size == 2)
        left = partition[0]
        right = partition[1]
        
        bc_left = TEST_get_bills(left).size
        bc_right = TEST_get_bills(right).size
        
        bc_both = TEST_get_bills(left | right).size
        support = (bc_all != 0) ? (100.0 * bc_both / bc_all) : (0.0)
        
        left_to_right_confidence = (bc_left != 0) ? (100.0 * bc_both / bc_left) : (0.0)
        if (left_to_right_confidence >= min_confidence)
          result.push([left, right, bc_left, bc_right, bc_both, left_to_right_confidence, support])
        end
      
        right_to_left_confidence = (bc_right != 0) ? (100.0 * bc_both / bc_right) : (0.0)
        if (right_to_left_confidence >= min_confidence)
          result.push([right, left, bc_right, bc_left, bc_both, right_to_left_confidence, support])
        end
      end
    }
  }

  # Sort by articles
  result.sort!
  
  # Sort by confidence and support
  result.sort!{|a, b|
      temp = b[5] <=> a[5]
      (temp == 0) ? (b[6] <=> a[6]) : temp}
  return result
end

TEST_get_association_rules(0.5, 0.5).each{|item|
  puts item.to_a.inspect
  }



%>
<!-- TEST CODE END -->



<!-- GENERATE OUTPUT -->
<% @output.each{|line| %> <%= line.html_safe %> <% } %></div>
